{"version":3,"names":["resolve","value","console","log","nativeEmitter","addListener","undefined","setFullAudioRemoteSDP","instanceId","remoteSdp","Promise","res","rej","nativeSetFullAudioRemoteSDP","e"],"sources":["setFullAudioRemoteSDP.tsx"],"sourcesContent":["import { setFullAudioRemoteSDP as nativeSetFullAudioRemoteSDP } from '../native-components/BBBN_FullAudioService';\nimport nativeEmitter from '../native-messaging/emitter';\n\n// Reference to the resolver of last call\nlet resolve = (value: unknown) => {\n  console.log(\n    `default resolve function called, this should never happen: ${value}`\n  );\n};\n\n// Resolve promise when SDP offer is available\nnativeEmitter.addListener('onSetFullAudioRemoteSDPCompleted', () => {\n  resolve(undefined);\n});\n\n// Entry point of this method\nfunction setFullAudioRemoteSDP(instanceId: Number, remoteSdp: string) {\n  return new Promise((res, rej) => {\n    // store the resolver for later call (when event is received)\n    resolve = res;\n\n    try {\n      console.log(\n        `[${instanceId}] - >nativeSetFullAudioRemoteSDP ${remoteSdp}`\n      );\n      // call native swift method that triggers the broadcast popup\n      nativeSetFullAudioRemoteSDP(remoteSdp);\n    } catch (e) {\n      rej(`Call to nativeSetFullAudioRemoteSDP failed`);\n    }\n  });\n}\n\nexport default setFullAudioRemoteSDP;\n"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA,IAAIA,OAAO,GAAIC,KAAD,IAAoB;EAChCC,OAAO,CAACC,GAAR,CACG,8DAA6DF,KAAM,EADtE;AAGD,CAJD,C,CAMA;;;AACAG,gBAAA,CAAcC,WAAd,CAA0B,kCAA1B,EAA8D,MAAM;EAClEL,OAAO,CAACM,SAAD,CAAP;AACD,CAFD,E,CAIA;;;AACA,SAASC,qBAAT,CAA+BC,UAA/B,EAAmDC,SAAnD,EAAsE;EACpE,OAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;IAC/B;IACAZ,OAAO,GAAGW,GAAV;;IAEA,IAAI;MACFT,OAAO,CAACC,GAAR,CACG,IAAGK,UAAW,oCAAmCC,SAAU,EAD9D,EADE,CAIF;;MACA,IAAAI,4CAAA,EAA4BJ,SAA5B;IACD,CAND,CAME,OAAOK,CAAP,EAAU;MACVF,GAAG,CAAE,4CAAF,CAAH;IACD;EACF,CAbM,CAAP;AAcD;;eAEcL,qB"}