{"version":3,"names":["observePromiseResult","instanceId","webViewRef","sequence","prom","then","result","console","log","current","injectJavaScript","JSON","stringify","catch","exception","error","handleWebviewMessage","event","stringData","nativeEvent","data","parse","method","promise","initializeScreenShare","createFullAudioOffer","arguments","createScreenShareOffer","setScreenShareRemoteSDP","sdp","setFullAudioRemoteSDP","addScreenShareRemoteIceCandidate","stopScreenShare"],"sources":["message-handler.tsx"],"sourcesContent":["import type { MutableRefObject } from 'react';\nimport type { WebView, WebViewMessageEvent } from 'react-native-webview';\nimport initializeScreenShare from '../methods/initializeScreenShare';\nimport createScreenShareOffer from '../methods/createScreenShareOffer';\nimport setScreenShareRemoteSDP from '../methods/setScreenShareRemoteSDP';\nimport setFullAudioRemoteSDP from '../methods/setFullAudioRemoteSDP';\nimport addScreenShareRemoteIceCandidate from '../methods/addScreenShareRemoteIceCandidate';\nimport createFullAudioOffer from '../methods/createFullAudioOffer';\nimport stopScreenShare from '../methods/stopScreenShare';\n\nfunction observePromiseResult(\n  instanceId: Number,\n  webViewRef: MutableRefObject<WebView>,\n  sequence: number,\n  prom: Promise<any>\n) {\n  prom\n    .then((result: any) => {\n      console.log(`[${instanceId}] - Promise ${sequence} resolved!`, result);\n\n      webViewRef.current.injectJavaScript(\n        `window.nativeMethodCallResult(${sequence}, true ${\n          result ? ',' + JSON.stringify(result) : ''\n        });`\n      );\n    })\n    .catch((exception: any) => {\n      console.error(`[${instanceId}] - Promise ${sequence} failed!`, exception);\n      webViewRef.current.injectJavaScript(\n        `window.nativeMethodCallResult(${sequence}, false ${\n          exception ? ',' + JSON.stringify(exception) : ''\n        });`\n      );\n    });\n}\n\nexport function handleWebviewMessage(\n  instanceId: Number,\n  webViewRef: MutableRefObject<any>,\n  event: WebViewMessageEvent\n) {\n  const stringData = event?.nativeEvent?.data;\n\n  console.log('handleWebviewMessage - ', instanceId);\n\n  const data = JSON.parse(stringData);\n  if (data?.method && data?.sequence) {\n    let promise;\n    switch (data?.method) {\n      case 'initializeScreenShare':\n        promise = initializeScreenShare(instanceId);\n        break;\n      case 'createFullAudioOffer':\n        promise = createFullAudioOffer(\n          instanceId,\n          JSON.stringify(data?.arguments[0])\n        );\n        break;\n      case 'createScreenShareOffer':\n        promise = createScreenShareOffer(\n          instanceId,\n          JSON.stringify(data?.arguments[0])\n        );\n        break;\n      case 'setScreenShareRemoteSDP':\n        promise = setScreenShareRemoteSDP(instanceId, data?.arguments[0].sdp);\n        break;\n      case 'setFullAudioRemoteSDP':\n        promise = setFullAudioRemoteSDP(instanceId, data?.arguments[0].sdp);\n        break;\n      case 'addRemoteIceCandidate':\n        promise = addScreenShareRemoteIceCandidate(\n          instanceId,\n          JSON.stringify(data?.arguments[0])\n        );\n        break;\n      case 'stopScreenShare':\n        promise = stopScreenShare(instanceId);\n        break;\n      default:\n        throw `[${instanceId}] - Unknown method ${data?.method}`;\n    }\n    observePromiseResult(instanceId, webViewRef, data.sequence, promise);\n  } else {\n    console.log(`[${instanceId}] - Ignoring unknown message: $stringData`);\n  }\n}\n\nexport default { handleWebviewMessage };\n"],"mappings":"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"}