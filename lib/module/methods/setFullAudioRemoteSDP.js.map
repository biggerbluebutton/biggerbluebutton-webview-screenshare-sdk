{"version":3,"names":["setFullAudioRemoteSDP","nativeSetFullAudioRemoteSDP","nativeEmitter","resolve","value","console","log","addListener","undefined","instanceId","remoteSdp","Promise","res","rej","e"],"sources":["setFullAudioRemoteSDP.tsx"],"sourcesContent":["import { setFullAudioRemoteSDP as nativeSetFullAudioRemoteSDP } from '../native-components/BBBN_FullAudioService';\nimport nativeEmitter from '../native-messaging/emitter';\n\n// Reference to the resolver of last call\nlet resolve = (value: unknown) => {\n  console.log(\n    `default resolve function called, this should never happen: ${value}`\n  );\n};\n\n// Resolve promise when SDP offer is available\nnativeEmitter.addListener('onSetFullAudioRemoteSDPCompleted', () => {\n  resolve(undefined);\n});\n\n// Entry point of this method\nfunction setFullAudioRemoteSDP(instanceId: Number, remoteSdp: string) {\n  return new Promise((res, rej) => {\n    // store the resolver for later call (when event is received)\n    resolve = res;\n\n    try {\n      console.log(\n        `[${instanceId}] - >nativeSetFullAudioRemoteSDP ${remoteSdp}`\n      );\n      // call native swift method that triggers the broadcast popup\n      nativeSetFullAudioRemoteSDP(remoteSdp);\n    } catch (e) {\n      rej(`Call to nativeSetFullAudioRemoteSDP failed`);\n    }\n  });\n}\n\nexport default setFullAudioRemoteSDP;\n"],"mappings":"AAAA,SAASA,qBAAqB,IAAIC,2BAAlC,QAAqE,4CAArE;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CAEA;;AACA,IAAIC,OAAO,GAAIC,KAAD,IAAoB;EAChCC,OAAO,CAACC,GAAR,CACG,8DAA6DF,KAAM,EADtE;AAGD,CAJD,C,CAMA;;;AACAF,aAAa,CAACK,WAAd,CAA0B,kCAA1B,EAA8D,MAAM;EAClEJ,OAAO,CAACK,SAAD,CAAP;AACD,CAFD,E,CAIA;;AACA,SAASR,qBAAT,CAA+BS,UAA/B,EAAmDC,SAAnD,EAAsE;EACpE,OAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;IAC/B;IACAV,OAAO,GAAGS,GAAV;;IAEA,IAAI;MACFP,OAAO,CAACC,GAAR,CACG,IAAGG,UAAW,oCAAmCC,SAAU,EAD9D,EADE,CAIF;;MACAT,2BAA2B,CAACS,SAAD,CAA3B;IACD,CAND,CAME,OAAOI,CAAP,EAAU;MACVD,GAAG,CAAE,4CAAF,CAAH;IACD;EACF,CAbM,CAAP;AAcD;;AAED,eAAeb,qBAAf"}