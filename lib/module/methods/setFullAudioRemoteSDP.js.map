{"version":3,"names":["setFullAudioRemoteSDP","nativeSetFullAudioRemoteSDP","nativeEmitter","resolve","value","console","log","addListener","undefined","instanceId","remoteSdp","Promise","res","rej","e"],"sources":["setFullAudioRemoteSDP.tsx"],"sourcesContent":["import { setFullAudioRemoteSDP as nativeSetFullAudioRemoteSDP } from '../native-components/BBBN_FullAudioService';\nimport nativeEmitter from '../native-messaging/emitter';\n\n// Reference to the resolver of last call\nlet resolve = (value: unknown) => {\n  console.log(\n    `default resolve function called, this should never happen: ${value}`\n  );\n};\n\n// Resolve promise when SDP offer is available\nnativeEmitter.addListener('onSetFullAudioRemoteSDPCompleted', () => {\n  resolve(undefined);\n});\n\n// Entry point of this method\nfunction setFullAudioRemoteSDP(instanceId: Number, remoteSdp: string) {\n  return new Promise((res, rej) => {\n    // store the resolver for later call (when event is received)\n    resolve = res;\n\n    try {\n      console.log(\n        `[${instanceId}] - >nativeSetFullAudioRemoteSDP ${remoteSdp}`\n      );\n      // call native swift method that triggers the broadcast popup\n      nativeSetFullAudioRemoteSDP(remoteSdp);\n    } catch (e) {\n      rej(`Call to nativeSetFullAudioRemoteSDP failed`);\n    }\n  });\n}\n\nexport default setFullAudioRemoteSDP;\n"],"mappings":"AAAA,SAASA,qBAAqB,IAAIC,2BAA2B,QAAQ,4CAA4C;AACjH,OAAOC,aAAa,MAAM,6BAA6B;;AAEvD;AACA,IAAIC,OAAO,GAAIC,KAAc,IAAK;EAChCC,OAAO,CAACC,GAAG,CACT,8DAA8DF,KAAK,EACrE,CAAC;AACH,CAAC;;AAED;AACAF,aAAa,CAACK,WAAW,CAAC,kCAAkC,EAAE,MAAM;EAClEJ,OAAO,CAACK,SAAS,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA,SAASR,qBAAqBA,CAACS,UAAkB,EAAEC,SAAiB,EAAE;EACpE,OAAO,IAAIC,OAAO,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC/B;IACAV,OAAO,GAAGS,GAAG;IAEb,IAAI;MACFP,OAAO,CAACC,GAAG,CACT,IAAIG,UAAU,oCAAoCC,SAAS,EAC7D,CAAC;MACD;MACAT,2BAA2B,CAACS,SAAS,CAAC;IACxC,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVD,GAAG,CAAC,4CAA4C,CAAC;IACnD;EACF,CAAC,CAAC;AACJ;AAEA,eAAeb,qBAAqB","ignoreList":[]}